<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-08-02T18:50:17+00:00</updated><id>/feed.xml</id><title type="html">Tianyi Liu</title><subtitle>A website that introduces you to my works, my thoughts, my friends and colleagues, and more.</subtitle><entry><title type="html">Visualizing Patient Origin in North Carolina Using Zipcode in R</title><link href="/2023/10/02/visualize_patient_geography.html" rel="alternate" type="text/html" title="Visualizing Patient Origin in North Carolina Using Zipcode in R" /><published>2023-10-02T00:00:00+00:00</published><updated>2025-08-02T18:49:28+00:00</updated><id>/2023/10/02/visualize_patient_geography</id><content type="html" xml:base="/2023/10/02/visualize_patient_geography.html"><![CDATA[<p>Do you want to plot something like this? Wonder how you could do it in R?</p>

<p><img src="/images/patient_origin_map.jpg" alt="Patient Count by NC County" /></p>

<p>In this article, we will go over in detail the steps for plotting the density of
patients from each North Carolina (NC) county by their zipcode using <code class="language-plaintext highlighter-rouge">ggplot</code> in
<code class="language-plaintext highlighter-rouge">R</code>, a.k.a. the plot above. We have 191 patients from 57 unique zipcodes.
Since the patient data are protected, the full data is not presented here. You can find the
zipcode data by <a href="https://docs.google.com/spreadsheets/d/1wZhaS7GGySFX62BjRGlKjSMf0AyekCGeiJEjaZaLUBA/edit?usp=sharing">clicking here</a>.</p>

<p>The main workflow here it to merge the data frame containing patient count by county with
that of the map coordinates of each NC county. Some data wrangling is needed to translate
patient zipcode to county names before the final merging of the data frames. Some contents
of this blog post are inspired by <a href="https://www.peterhaschke.com/r/2013/12/05/NCmaps.html">this post</a>
by Peter Haschke.</p>

<p>This post assumes that you have a beginner knowledge of <code class="language-plaintext highlighter-rouge">R</code> and its data wrangling functions
in <a href="https://r4ds.had.co.nz/introduction.html#the-tidyverse">tidyverse</a>, as well as the <a href="https://r4ds.had.co.nz/pipes.html">pipe operator</a>. If not, these links will provide you with some refreshers!</p>

<p>We start by loading the following packages in R:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w"> </span><span class="c1"># data wrangling</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">stringr</span><span class="p">)</span><span class="w"> </span><span class="c1"># string object manipulation</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">magrittr</span><span class="p">)</span><span class="w"> </span><span class="c1"># the package of the famed pipe operator</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w"> </span><span class="c1"># data plotting</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">maps</span><span class="p">)</span><span class="w"> </span><span class="c1"># this allows us to extract NC map</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">scales</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">zipcodeR</span><span class="p">)</span><span class="w"> </span><span class="c1"># for zipcode metadata</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggthemes</span><span class="p">)</span><span class="w"> </span><span class="c1"># not necessary - allows us to set ggplot themes more easily</span><span class="w">
</span></code></pre></div></div>

<p>Suppose that the patient data is stored in a <a href="https://tibble.tidyverse.org/">tibble</a> named <code class="language-plaintext highlighter-rouge">clean_df</code>, where there is a column <code class="language-plaintext highlighter-rouge">zip</code> that contains all the zipcodes:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">(</span><span class="n">clean_df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="n">zip</span><span class="p">),</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A tibble: 5 × 1
   zip  
   &lt;fct&gt;
 1 28376
 2 28376
 3 27278
 4 28315
 5 27616
</code></pre></div></div>
<p>Now, we count up the number of patients from each zipcode using the <code class="language-plaintext highlighter-rouge">summarise()</code>
function:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zip_sum</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">clean_df</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">zip</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">())</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">ungroup</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">zip_sum</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A tibble: 5 × 2
   zip       n
   &lt;fct&gt; &lt;int&gt;
 1 24112     1
 2 27025     2
 3 27105     1
 4 27208     1
 5 27215     8
</code></pre></div></div>
<p>After this, we can map the patient zipcodes to their metadata</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zip_info</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">reverse_zipcode</span><span class="p">(</span><span class="n">zip_sum</span><span class="o">$</span><span class="n">zip</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>A sample of this <code class="language-plaintext highlighter-rouge">zip_info</code> data frame should look like this (by calling <code class="language-plaintext highlighter-rouge">head(zip_info, 2)</code>):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A tibble: 2 × 24
  zipcode zipcode_type major_city    post_office_city  common_city_list county  state   lat   lng
  &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;         &lt;chr&gt;                       &lt;blob&gt; &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;
1 27025   Standard     Madison       Madison, NC             &lt;raw 19 B&gt; Rockin… NC     36.4 -80  
2 27105   Standard     Winston Salem Winston Salem, NC       &lt;raw 25 B&gt; Forsyt… NC     36.2 -80.2
</code></pre></div></div>
<p>The only conlumns we want are <code class="language-plaintext highlighter-rouge">zipcode</code> and <code class="language-plaintext highlighter-rouge">county</code>. We also rename <code class="language-plaintext highlighter-rouge">zipcode</code> to <code class="language-plaintext highlighter-rouge">zip</code>
to be consistent with the variable name in <code class="language-plaintext highlighter-rouge">zip_sum</code>:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zip_sub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">zip_info</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="n">zipcode</span><span class="p">,</span><span class="w"> </span><span class="n">county</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">rename</span><span class="p">(</span><span class="n">zip</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">zipcode</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Next, we begin by extracting the NC county map coordinates from the <code class="language-plaintext highlighter-rouge">map</code> package,
and save it in a data frame for plotting later:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">map_data</span><span class="p">(</span><span class="s2">"county"</span><span class="p">)</span><span class="w">
</span><span class="n">nc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">map</span><span class="p">,</span><span class="w"> </span><span class="n">region</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"north carolina"</span><span class="p">)</span><span class="w"> </span><span class="c1"># subset the data to NC county coordinates</span><span class="w">
</span></code></pre></div></div>
<p>We can check the head of <code class="language-plaintext highlighter-rouge">nc</code> as well (<code class="language-plaintext highlighter-rouge">head(nc, 2)</code>):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>long      lat group order         region subregion
54915 -79.53800 35.84424  1857 54915 north carolina  alamance
54916 -79.54372 35.89008  1857 54916 north carolina  alamance
</code></pre></div></div>
<p>A little bit of geographical knowledge tells us the county names are stored in the column
named <code class="language-plaintext highlighter-rouge">subregion</code>, and they are all lower-case while without the trailing “County” as in <code class="language-plaintext highlighter-rouge">zip_sub</code>!
To match this, we make some changes to the column storing county names in <code class="language-plaintext highlighter-rouge">zip_sub</code>:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zip_sub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">zip_sub</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="c1"># extract county names and set the first latter to lower case</span><span class="w">
  </span><span class="c1"># assign these values to the column 'subregion'</span><span class="w">
  </span><span class="n">mutate</span><span class="p">(</span><span class="n">subregion</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str_split_i</span><span class="p">(</span><span class="n">county</span><span class="p">,</span><span class="w"> </span><span class="s2">" "</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
         </span><span class="n">subregion</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">str_to_lower</span><span class="p">(</span><span class="n">subregion</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="o">-</span><span class="n">county</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Now, we are ready to merge <code class="language-plaintext highlighter-rouge">zip_sub</code> with <code class="language-plaintext highlighter-rouge">zip_sum</code>, which yield each patient’s county of origin;
and then we merge this combined data frame with <code class="language-plaintext highlighter-rouge">nc</code>, adding the map coordinates for counties:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pt_zip_counts</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">zip_sum</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">left_join</span><span class="p">(</span><span class="n">zip_sub</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"zip"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">right_join</span><span class="p">(</span><span class="n">nc</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"subregion"</span><span class="p">,</span><span class="w"> </span><span class="n">relationship</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"many-to-many"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>This prompts many missing values <code class="language-plaintext highlighter-rouge">NA</code> since we do not have any patient from the majority of counties.
To deal with this, we just replace the missing value with 0:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">replace_na</span><span class="p">(</span><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>The following steps are also not mandatory: we replace any count of patients from a zipcode
above the 95-th percentile of all counts to the 95-th percentile value to get a better dynamic range
of colors - this way low counts like 1 would be clearly visualized as well.</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n_plot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n</span><span class="w">
</span><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n_plot</span><span class="p">[</span><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n_plot</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="m">.95</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">quantile</span><span class="p">(</span><span class="n">pt_zip_counts</span><span class="o">$</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="m">.95</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>A final check of the data frame (<code class="language-plaintext highlighter-rouge">head(pt_zip_count, 2)</code>) shows the followings:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A tibble: 2 × 9
  zip       n subregion   long   lat group order region         n_plot
  &lt;chr&gt; &lt;int&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;           &lt;dbl&gt;
1 27025     2 rockingham -80.0  36.5  1937 57960 north carolina      2
2 27025     2 rockingham -79.7  36.5  1937 57961 north carolina      2
</code></pre></div></div>

<p>Now, we dish up the plot using <code class="language-plaintext highlighter-rouge">geom_polygon</code> from <code class="language-plaintext highlighter-rouge">ggplot</code>:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">S</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pt_zip_counts</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_polygon</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">group</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n_plot</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_viridis_c</span><span class="p">(</span><span class="s2">"Patient count"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.ticks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">panel.grid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">legend.position</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">.2</span><span class="p">,</span><span class="m">.15</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">guides</span><span class="p">(</span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_colorbar</span><span class="p">(</span><span class="n">barwidth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">13</span><span class="p">,</span><span class="w"> </span><span class="n">title.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"top"</span><span class="p">,</span><span class="w"> </span><span class="n">direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"horizontal"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>
<p>Saving it using the following line (you can substitute the file path with whatever you like):</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ggsave</span><span class="p">(</span><span class="s2">"patient_origin_map.png"</span><span class="p">,</span><span class="w"> </span><span class="n">S</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">9.5</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3.5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>We have the final product shown at the beginning of the page!</p>

<p>Thanks for reading! I hope you have learned a lot and enjoyed this content. Have questions
or suggestions? Feel free to email me through the Contact page.</p>]]></content><author><name>tianyi-liu</name></author><category term="visualization," /><category term="R," /><category term="ggplot2," /><category term="zipcode," /><category term="geography," /><category term="NC," /><category term="tutorial" /><summary type="html"><![CDATA[Do you want to plot something like this? Wonder how you could do it in R?]]></summary></entry><entry><title type="html">I Love Trying New Things</title><link href="/2023/02/23/example-post-3.html" rel="alternate" type="text/html" title="I Love Trying New Things" /><published>2023-02-23T00:00:00+00:00</published><updated>2025-08-02T18:49:28+00:00</updated><id>/2023/02/23/example-post-3</id><content type="html" xml:base="/2023/02/23/example-post-3.html"><![CDATA[<p>Now I am here, writing blogs using Markdown files. This following code chunk is just an example.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">x</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>
</code></pre></div></div>

<p>Here is a line of math:</p>

<p>$
    E = mc^2.
$</p>

<p>Here I am embedding a tweet from Dirk Eddelbuettel, creator of the R/C++ interface package <code class="language-plaintext highlighter-rouge">Rcpp</code>:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">RcppArmadillo 0.12.6.4.0 on CRAN: Another Upstream Bugfix<a href="https://t.co/xpJgIPyERW">https://t.co/xpJgIPyERW</a><a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://twitter.com/hashtag/rcpp?src=hash&amp;ref_src=twsrc%5Etfw">#rcpp</a> <a href="https://t.co/TV2tJ7bNY0">pic.twitter.com/TV2tJ7bNY0</a></p>&mdash; Dirk Eddelbuettel (@eddelbuettel) <a href="https://twitter.com/eddelbuettel/status/1701031187441991935?ref_src=twsrc%5Etfw">September 11, 2023</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<!-- Now a different language:

```R
X = matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)
t(X) %*% X
``` -->]]></content><author><name>tianyi-liu</name></author><category term="markdown," /><category term="code" /><summary type="html"><![CDATA[Now I am here, writing blogs using Markdown files. This following code chunk is just an example.]]></summary></entry><entry><title type="html">Example post 2</title><link href="/2021/09/30/example-post-2.html" rel="alternate" type="text/html" title="Example post 2" /><published>2021-09-30T00:00:00+00:00</published><updated>2025-08-02T18:49:28+00:00</updated><id>/2021/09/30/example-post-2</id><content type="html" xml:base="/2021/09/30/example-post-2.html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>]]></content><author><name>tianyi-liu</name></author><summary type="html"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.]]></summary></entry><entry><title type="html">Example post 1</title><link href="/2019/01/07/example-post-1.html" rel="alternate" type="text/html" title="Example post 1" /><published>2019-01-07T00:00:00+00:00</published><updated>2025-08-02T18:49:28+00:00</updated><id>/2019/01/07/example-post-1</id><content type="html" xml:base="/2019/01/07/example-post-1.html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>]]></content><author><name>tianyi-liu</name></author><category term="biology" /><category term="medicine" /><category term="big data" /><summary type="html"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.]]></summary></entry></feed>